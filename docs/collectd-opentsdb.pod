=head1 NAME

C<write_opentsdb> - Collectd OpenTSDB plugin

=head1 SYNOPSIS

=over 4

  <Plugin write_opentsdb>
          <Node>
                  URL "http://localhost:4242"
                  JsonHostTag true
                  AutoFqdnFallback true
                  StoreRates false
                  AlwaysAppendDS false
          </Node>
  </Plugin>

=back


=head1 DESCRIPTION

The C<write_opentsdb> plugin writes data to I<OpenTSDB>, a scalable open-source
time series database. The plugin connects to a I<TSD>, a masterless, no shared
state daemon that ingests metrics and stores them in HBase.

The C<write_opentsdb> plugin uses I<HTTP(S)>, I<JSON> and the I</api/put API> unlike the
default C<write_tsdb> plugin which uses the legacy I<telnet like API>.

Compared to the C<write_tsdb> plugin, the C<write_opentsdb> plugin is also more versatile regarding
tag setting (PreChain rules for metric name rework (ex: cpu.0.idle -> sys.cpu.idle with tag cpu_id=0) and
static tagging through a json object passed as Hostname).

Even if this plugin can partially work with older versions, using it with collectd >= 5.6 is strongly recommended.
With older version some functionalities, specially I<JsonHostTag> and tag I<write_opentsdb filtering Chain>, will not work properly.

=head1 CONFIGURATION

=head2 C<write_opentsdb> configuration options:

=over 4

=item B<URL> I<url>

URL of the I<OpenTSDB> master. Mandatory

=item B<BufferSize> I<Integer>

Number of metrics to buffer before POSTing to I<OpenTSDB>. I<OpenTSDB> limits
this number at 50, so it should be lower than that.

Default: 30

=item B<JsonHostTag> B<true>|B<false>

Try to parse the Hostname as the set of static tags for data-points.

The I<Hostname> (Global Option) should be set as followed for this to work:

  Hostname "{\"fqdn\": \"http.node1.example.org\", \"env\": \"prod\", \"role\": \"http\"}"

Keep in mind that the total length of Hostname is limited to 127 characters (63 characters for collectd <= 5.5).

Also, keep in mind that OpenTSDB doesn't recommend more than 4 or 5 tags, with  maximum of 8 tags by default.

Consequently choose your tags carefully, specially when also using I<write_opentsdb filtering Chain>.

=item B<AutoFqdnFallback> B<true>|B<false>

If B<JsonHostTag> and B<AutoFqdnFallback> are set to B<true> and if I<Hostname> failed to be parsed as
json, this plugin sets the I<fqdn> tag to I<Hostname> raw value as a fallback.


=item B<StoreRates> B<false>|B<true>

If set to B<true>, convert counter values to rates. If set to B<false>
(the default) counter values are stored as is, as an increasing
integer number.

=item B<AlwaysAppendDS> B<false>|B<true>

If set the B<true>, append the name of the I<Data Source> (DS) to the "metric"
identifier. If set to B<false> (the default), this is only done when there is
more than one DS.

=item B<VerifyPeer> B<true>|B<false>

Enable or disable peer SSL certificate verification. See
L<http://curl.haxx.se/docs/sslcerts.html> for details. Enabled by default.

=item B<VerifyHost> B<true|false>

Enable or disable peer host name verification. If enabled, the plugin checks if
the C<Common Name> or a C<Subject Alternate Name> field of the SSL certificate
matches the host name provided by the B<URL> option. If this identity check
fails, the connection is aborted. Obviously, only works when connecting to a
SSL enabled server. Enabled by default.

=item B<CACert> I<File>

File that holds one or more SSL certificates. If you want to use HTTPS you will
possibly need this option. What CA certificates come bundled with C<libcurl>
and are checked by default depends on the distribution you use.

=item B<CAPath> I<Directory>

Directory holding one or more CA certificate files. You can use this if for
some reason all the needed CA certificates aren't in the same file and can't be
pointed to using the B<CACert> option. Requires C<libcurl> to be built against
OpenSSL.

=item B<ClientKey> I<File>

File that holds the private key in PEM format to be used for certificate-based
authentication.

=item B<ClientCert> I<File>

File that holds the SSL certificate to be used for certificate-based
authentication.

=item B<ClientKeyPass> I<Password>

Password required to load the private key in B<ClientKey>.

=item B<SSLVersion> B<SSLv2>|B<SSLv3>|B<TLSv1>|B<TLSv1_0>|B<TLSv1_1>|B<TLSv1_2>|B<TLSv1_3>

Define which SSL protocol version must be used. By default C<libcurl> will
attempt to figure out the remote SSL protocol version. See
L<curl_easy_setopt(3)> for more details.

=item B<Timeout> I<Seconds>

Request timeout in seconds.

=back

=head2 write_opentsdb filtering Chain (OpenTSDB tagging)

I<OpenTSDB> relies heavily on tags, which does not marry well with I<Collectd>.
For that, C<write_opentsdb> can use collectd filterring Chain rules to rework the metrics with a
I<Collecd> I<PreCache> chain.

For these filtering rules to work, collectd version >= 5.6 is required (introduction of I<MetaData> option).

=head3 Synopsys:

=over 4

 LoadPlugin match_regex
 LoadPlugin target_set

 <Chain "PreCache">
   <Rule "opentsdb_cpu">
     <Match "regex">
       Plugin "^cpu$"
     </Match>
     <Target "set">
       MetaData "tsdb_tag_pluginInstance" "cpu"
       MetaData "tsdb_tag_type" ""
       MetaData "tsdb_prefix" "sys."
     </Target>
   </Rule>
   <Rule "opentsdb_df">
     <Match "regex">
       Plugin "^df$"
     </Match>
     <Target "set">
       MetaData "tsdb_tag_pluginInstance" "mount"
       MetaData "tsdb_tag_type" ""
       MetaData "tsdb_prefix" "sys."
     </Target>
   </Rule>
   <Rule "opentsdb_disk">
     <Match "regex">
       Plugin "^disk$"
     </Match>
     <Target "set">
       MetaData "tsdb_tag_pluginInstance" "disk"
       MetaData "tsdb_prefix" "sys."
     </Target>
   </Rule>
   <Rule "opentsdb_interface">
     <Match "regex">
       Plugin "^interface$"
     </Match>
     <Target "set">
       MetaData "tsdb_tag_pluginInstance" "iface"
       MetaData "tsdb_prefix" "sys."
     </Target>
   </Rule>
   <Rule "opentsdb_load">
     <Match "regex">
       Plugin "^loac$"
     </Match>
     <Target "set">
       MetaData "tsdb_tag_type" ""
       MetaData "tsdb_prefix" "sys."
     </Target>
   </Rule>
   <Rule "opentsdb_swap">
     <Match "regex">
       Plugin "^swap$"
     </Match>
     <Target "set">
       MetaData "tsdb_prefix" "sys."
     </Target>
   </Rule>
 </Chain>

=back

=head3 OpenTSDB metric format:

With no filters, the metric name will be:

  <plugin>[.<pluginInstance>].<type>[.<typeInstance>].<dsname>

Example:

  disk.sdb.disk_ops.read

This format can be altered with filtering options.

=head3 Filtering options/prefixes:

=over 4

=item B<tsdb_prefix> I<String>

If B<tsdb_prefix> is set, the metric name is prefixed with given value.

=item B<tsdb_id> I<String>

If B<tsdb_id> is set, the metric name is replaced with given value.

If B<tsdb_prefix> is set, the metric name will also be prefixed with B<tsdb_prefix> value.

Other options have no effect on metric name if B<tsdb_id> is set, however they retains their effect on tags.

=item B<tsdb_tag_plugin> I<String>

If B<tsdb_tag_plugin> is set and I<String> is not empty, the I<plugin> part of the metric name
is removed, and used as value of of tag I<String>.

if I<String> is empty, it just removes the I<plugin> part of the metric, no tag are set.

=item B<tsdb_tag_pluginInstance> I<String>

If B<tsdb_tag_pluginInstance> is set and I<String> is not empty, the I<pluginInstance> 
part of the metric name is removed, and used as value of of tag I<String>.

if I<String> is empty, it just removes the I<pluginInstance> part of the metric name,
no tag are set.

=item B<tsdb_tag_type> I<String>

If B<tsdb_tag_type> is set and I<String> is not empty, the I<type>
part of the metric name is removed, and used as value of of tag I<String>.

if I<String> is empty, it just removes the I<type> part of the metric name,
no tag are set.

=item B<tsdb_tag_typeInstance> I<String>

If B<tsdb_tag_typeInstance> is set and I<String> is not empty, the I<typeInstance>
part of the metric name is removed, and used as value of of tag I<String>.

if I<String> is empty, it just removes the I<typeInstance> part of the metric name,
no tag are set.

=item B<tsdb_tag_dsname> I<String>

If B<tsdb_tag_dsname> is set and I<String> is not empty, the I<dsname> 
part of the metric name is removed, and used as value of of tag I<String>.

if I<String> is empty, it just removes the I<dsname> part of the metric name,
no tag are set.

=item B<tsdb_tag_add_*> I<String>

B<tsdb_tag_add_*> adds a tag with the value I<String>. The key of tag comes from the last portion
of tsdb_tag_add_<key> Metadata.

Example : 

  MetaData "tsdb_tag_add_status" "down"

This rule adds a tag named 'status' with value 'down'.

=back

=head1 SEE ALSO

L<collectd(1)>,
L<collectd.conf(5)>,
L<regex(7)>,

=head1 AUTHORS

=head2 Heavily based on work from:

Florian Forster E<lt>octo@collectd.orgE<gt>,
Doug MacEachern E<lt>dougm at hyperic.comE<gt>,
Paul Sadauskas E<lt>psadauskas at gmail.comE<gt>,
Scott Sanders E<lt>scott at jssjr.comE<gt>,
Pierre-Yves Ritschard E<lt>pyr at spootnik.orgE<gt>,
Brett Hawn E<lt>bhawn at llnw.comE<gt>,
Kevin Bowling E<lt>kbowling@llnw.comE<gt>,
Yves Mettier E<lt>ymettier@free.frE<gt>

=head2 Authors:

Pierre-Francois Carpentier E<lt>carpentier.pf@gmail.comE<gt>

=cut
